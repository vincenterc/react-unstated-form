{"version":3,"sources":["../src/PropsFactory.js"],"names":["PropsFactory","setState","options","native","getEditProps","editing","values","valuesBeforeEdit","enabled","toggle","errors","getSubmitProps","submitting","submitError","fnSubmit","fnValidate","defaultValidator","setStateAfterSubmit","error","nextState","undefined","submit","then","catch","getInputProps","getSingleInputProps","onChange","value","e","target","validationError","key","props","disabled","name","onChangeText","Object","keys","reduce","acc"],"mappings":"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","file":"PropsFactory.js","sourcesContent":["const PropsFactory = (setState, options={}) => {\n    let { native=false } = options; \n\n    const getEditProps = ({ editing, values, valuesBeforeEdit }) => {\n            return {\n                enabled: editing,\n                toggle: () => {\n                    if (!editing) {\n                        setState({\n                            editing: true,\n                            valuesBeforeEdit: values\n                        })\n                    } else {\n                        setState({\n                            editing: false,\n                            values: valuesBeforeEdit,\n                            valuesBeforeEdit: null,\n                            errors: {}\n                        })\n                    }\n                }\n            }\n        };\n\n    const getSubmitProps = ({ values, submitting, submitError, fnSubmit, fnValidate=defaultValidator }) => {\n            const setStateAfterSubmit = ({ values, errors, error, editing = false }) => {\n                let nextState = {\n                    editing,\n                    submitting: false,\n                };\n\n                if (values !== undefined) {\n                    nextState.values = values;\n                }\n                if (errors !== undefined) {\n                    nextState.errors = errors;\n                }\n                if (error !== undefined) {\n                    nextState.submitError = error;\n                }\n\n                setState(nextState);\n            };\n\n            return {\n                enabled: fnValidate(undefined, undefined, values),\n                submitting,\n                submitError,\n                submit: () => {\n                    setState({ submitting: true });\n                    fnSubmit(values)\n                        .then(setStateAfterSubmit)\n                        .catch(setStateAfterSubmit)\n                }\n            }\n        };\n\n    const getInputProps = ({ values, errors, submitting, fnValidate=defaultValidator }) => {\n            const getSingleInputProps = key => {\n                const onChange = e => {\n                    /// if we're in react-native, the text fill be passed in directly\n                    let value = native ? e : e.target.value;\n                    let validationError = fnValidate(key, value, values);\n\n                    setState({\n                        values: {\n                            ...values,\n                            [key]: value\n                        },\n                        errors: {\n                            ...errors,\n                            [key]: validationError\n                        }\n                    })\n                }\n\n                let props = {\n                    value: values[key],\n                    disabled: submitting,\n                    name: key,\n                };\n\n                if (native) {\n                    props.onChangeText = onChange;\n                } else {\n                    props.onChange = onChange;\n                }\n\n                return props;\n            }\n\n            return Object.keys(values)\n                .reduce(\n                    (acc, key) => {\n                        acc[key] = getSingleInputProps(key)\n                        return acc;\n                    }, {}\n                );\n        }\n\n    return {\n        getEditProps,\n        getSubmitProps,\n        getInputProps,\n    }\n}\n\nconst defaultValidator = (key, value, values) => {\n    if (key === undefined, value === undefined) {\n        return true;\n    }\n\n    return null;\n}\n\nexport default PropsFactory;"]}