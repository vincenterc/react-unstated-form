{"version":3,"sources":["../src/UnstatedForm.js"],"names":["React","Component","PropsFactory","UnstatedForm","props","actions","init","values","editing","Error","state","valuesBeforeEdit","errors","submitting","submitError","propsFactory","setState","bind","native","render","editProps","getEditProps","inputProps","getInputProps","fnValidate","validate","submitProps","getSubmitProps","fnSubmit","submit"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;IAEMC,Y;;;AACJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,4HACXA,KADW;;AAAA,gCAEa,MAAKA,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,EAFb;AAAA,QAEZC,MAFY,yBAEZA,MAFY;AAAA,uDAEJC,OAFI;AAAA,QAEJA,OAFI,0CAEI,KAFJ;;AAIjB,QAAI,CAACD,MAAL,EAAa;AACX,YAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,UAAKC,KAAL,GAAa;AACXF,sBADW;AAEXD,oBAFW;AAGXI,wBAAkBJ,MAHP;AAIXK,cAAQ,EAJG;AAKXC,kBAAY,KALD;AAMXC,mBAAa;AANF,KAAb;;AASA,UAAKC,YAAL,GAAoBb,aAClB,MAAKc,QAAL,CAAcC,IAAd,OADkB,EAElB;AACEC,cAAQ,MAAKd,KAAL,CAAWc;AADrB,KAFkB,CAApB;AAjBiB;AAuBlB;;;;6BAEQ;AAAA,UACFb,OADE,GACS,KAAKD,KADd,CACFC,OADE;AAAA,mBAEoE,KAAKK,KAFzE;AAAA,UAEFH,MAFE,UAEFA,MAFE;AAAA,UAEMI,gBAFN,UAEMA,gBAFN;AAAA,UAEwBC,MAFxB,UAEwBA,MAFxB;AAAA,UAEgCJ,OAFhC,UAEgCA,OAFhC;AAAA,UAEyCK,UAFzC,UAEyCA,UAFzC;AAAA,UAEqDC,WAFrD,UAEqDA,WAFrD;;;AAIP,aAAOT,QAAQc,MAAR,CAAe;AACpBZ,sBADoB;AAEpBK,sBAFoB;;AAIpBQ,mBAAW,KAAKL,YAAL,CAAkBM,YAAlB,CAA+B;AACxCd,wBADwC;AAExCI,4CAFwC;AAGxCH;AAHwC,SAA/B,CAJS;;AAUpBc,oBAAY,KAAKP,YAAL,CAAkBQ,aAAlB,CAAgC;AAC1ChB,wBAD0C;AAE1CK,wBAF0C;AAG1CC,gCAH0C;AAI1CW,sBAAYnB,QAAQoB;AAJsB,SAAhC,CAVQ;;AAiBpBC,qBAAa,KAAKX,YAAL,CAAkBY,cAAlB,CAAiC;AAC5CpB,wBAD4C;AAE5CM,gCAF4C;AAG5CC,kCAH4C;AAI5Cc,oBAAUvB,QAAQwB,MAJ0B;AAK5CL,sBAAYnB,QAAQoB;AALwB,SAAjC;AAjBO,OAAf,CAAP;AAyBD;;;;EAvDwBxB,S;;AA0D3B,eAAeE,YAAf","file":"UnstatedForm.js","sourcesContent":["import React, {Component} from 'react';\nimport PropsFactory from './PropsFactory';\n\nclass UnstatedForm extends Component {\n  constructor(props) {\n    super(props);\n    let {values, editing=false} = this.props.actions.init();\n\n    if (!values) {\n      throw new Error('you must fill in initial values');\n    }\n\n    this.state = {\n      editing,\n      values,\n      valuesBeforeEdit: values,\n      errors: {},\n      submitting: false,\n      submitError: null,\n    }\n\n    this.propsFactory = PropsFactory(\n      this.setState.bind(this), \n      {\n        native: this.props.native \n      }\n    );\n  }\n\n  render() {\n    let {actions} = this.props;\n    let {values, valuesBeforeEdit, errors, editing, submitting, submitError} = this.state;\n\n    return actions.render({ \n      values, \n      errors, \n\n      editProps: this.propsFactory.getEditProps({\n        values, \n        valuesBeforeEdit,\n        editing, \n      }),\n\n      inputProps: this.propsFactory.getInputProps({\n        values, \n        errors, \n        submitting, \n        fnValidate: actions.validate\n      }), \n\n      submitProps: this.propsFactory.getSubmitProps({\n        values, \n        submitting, \n        submitError, \n        fnSubmit: actions.submit,\n        fnValidate: actions.validate,\n      }),\n    }); \n  }\n}\n\nexport default UnstatedForm; \n"]}